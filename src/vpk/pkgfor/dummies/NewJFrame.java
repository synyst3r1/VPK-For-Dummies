/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vpk.pkgfor.dummies;

import java.awt.BorderLayout;
import java.util.List;
import java.awt.Toolkit;
import javax.swing.JFrame; 
import java.nio.file.FileSystems;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.apache.commons.io.FileUtils;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import net.lingala.zip4j.core.ZipFile;
import net.lingala.zip4j.progress.ProgressMonitor;
import net.lingala.zip4j.exception.ZipException;
import net.lingala.zip4j.model.*;
import net.lingala.zip4j.util.*;

/**
 *
 * @author SYNYS
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        setSize(400, 150);
        //setLayout(new BorderLayout());
        setResizable(false);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        console = new JTextField();
        console.setEditable(false);
        console.setBounds(10, 60, 373, 20);
        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());
        panel.add(console, BorderLayout.CENTER);
 
        add(console);

        SwingUtilities.invokeLater( new Runnable()
        {   
            public void run()
            {
                console.setText(console.getText());
                console.validate();
                console.repaint();
            }
        });
        
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("VPK For Dummies");

        jButton1.setText("Open");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);
        jTextField1.setText("Select VPK");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Dummy Audio");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setText("Dummy Video");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jButton2.setText("Dummy!");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(147, 147, 147)
                .addComponent(jButton2)
                .addContainerGap(235, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2))
                .addGap(32, 32, 32)
                .addComponent(jButton2)
                .addContainerGap(180, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(469, 331));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public JFileChooser fd;
    public File filename;
    public File temp;
    private String setTxt;
    private JTextField console;   

            
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        fd = new JFileChooser();
        int returnVal = fd.showOpenDialog(jButton1);
        fd.setVisible(true);
        filename  = fd.getSelectedFile();
        if (filename == null)
            System.out.println("You cancelled the choice");
        else 
            jTextField1.setText(fd.getName(filename));
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    boolean dummyAudio = false;
    
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        dummyAudio = jCheckBox1.isSelected();
        
        System.out.println(dummyAudio);
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    boolean dummyVideo = false;
    
    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
        dummyVideo = jCheckBox2.isSelected();
        
        System.out.println(dummyVideo);
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(!dummyAudio && !dummyVideo) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(new JFrame(), "Check an option!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
        if(fd != null) {
            try {
                Path basedir = FileSystems.getDefault().getPath(fd.getCurrentDirectory().getAbsolutePath());
                //Backup
                File backup = new File(basedir.toFile(), "backup");
                boolean b = false;
                if(!backup.exists()) {
                    b = backup.mkdirs();
                }
                if(b) {
                    System.out.println("Backup folder created successfully");
                    //jTextArea1.setText("Backup folder created successfully");
                    //jTextArea1.update(jTextArea1.getGraphics());
                    console.setText("Backup folder created successfully");
                    console.update(console.getGraphics());
                }
                else {
                    System.out.println("Backup folder failed to create or already exists"); 
                    //jTextArea1.setText("Backup folder failed to create or already exists");
                    //jTextArea1.update(jTextArea1.getGraphics());
                    console.setText("Backup folder failed to create or already exists");
                    console.update(console.getGraphics());
                }
                 
                //Store Temp files
                Path tempDir = Files.createTempDirectory(basedir, "tmp");
                temp = tempDir.toFile();
                FileUtils.copyFileToDirectory(filename, backup);
                Thread.sleep(5000);
                
                //Scan for files to make dummy
                //jTextArea1.setText("Extracting Files Please Wait");
                //jTextArea1.update(jTextArea1.getGraphics());
                //setTxt = "Extracting Files Please Wait";
                console.setText("Extracting Files Please Wait");
                console.update(console.getGraphics());
                if(dummyAudio) {
                    try {
                        ZipFile zipFile = new ZipFile(filename);
                        List fileHeaderList = zipFile.getFileHeaders();

                        // Loop through the file headers
                         for (int i = 0; i < fileHeaderList.size(); i++) {
                            FileHeader fileHeader = (FileHeader)fileHeaderList.get(i);              
                            String fileName = fileHeader.getFileName();
                                if(fileName.contains(".p1d") || fileName.contains(".pck") || fileName.contains(".fsb") 
                                        || fileName.contains(".at9") || fileName.contains(".BNDL") || fileName.contains(".SPS") || fileName.contains(".vag") 
                                            || fileName.contains(".ogg") || fileName.contains(".wav")){
                                    zipFile.extractFile(fileHeader, temp.getPath());
                                }
                            }
                    } catch (ZipException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    File dir = new File("dir");
                    String[] audioextensions = new String[] { "p1d", "pck", "fsb", "at9", "BNDL", "SPS", "vag", "ogg", "wav" };
                    List<File> files = (List<File>) FileUtils.listFiles(temp, audioextensions, true);
                    files.stream().forEach((File file) -> {
                        try {
                            FileOutputStream dummy = new FileOutputStream(file);
                            Thread.sleep(500);
                        } catch (IOException e) {
                        } catch (InterruptedException ex) {
                            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    });
                }
                if(dummyVideo) {
                    try {
                       ZipFile zipFile = new ZipFile(filename);
                        List fileHeaderList = zipFile.getFileHeaders();
                        for (int i = 0; i < fileHeaderList.size(); i++) {
                            FileHeader fileHeader = (FileHeader)fileHeaderList.get(i);              
                            String fileName = fileHeader.getFileName();
                                if(fileName.contains(".mp4") || fileName.contains(".bik") || fileName.contains(".bk2") 
                                        || fileName.contains(".fmv") || fileName.contains(".usm")){
                                    zipFile.extractFile(fileHeader, temp.getPath());
                                }
                            }
                    } catch (ZipException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    File dir = new File("dir");
                    String[] videoextensions = new String[] { "mp4", "bik", "bk2", "fmv", "usm"};
                    List<File> files = (List<File>) FileUtils.listFiles(temp, videoextensions, true);
                    files.stream().forEach((File file) -> {
                        try {
                            FileOutputStream dummy = new FileOutputStream(file);
                            Thread.sleep(500);
                        } catch (IOException e) {
                        } catch (InterruptedException ex) {
                            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    });
                }

                try {
                    ZipFile zipFile = new ZipFile(filename);
                    String folderToAdd = temp.getPath();
                    ZipParameters parameters = new ZipParameters();
                    parameters.setIncludeRootFolder(false);
                    parameters.setCompressionMethod(Zip4jConstants.COMP_DEFLATE);
                    parameters.setCompressionLevel(Zip4jConstants.DEFLATE_LEVEL_FAST);
                    zipFile.setRunInThread(true);
                    ProgressMonitor progressMonitor = zipFile.getProgressMonitor();
                    zipFile.addFolder(folderToAdd, parameters);

                    while (progressMonitor.getState() == ProgressMonitor.STATE_BUSY) {
                        System.out.println("Percent Done: " + progressMonitor.getPercentDone());
                        //jTextArea1.setText("Zipping Files: " + progressMonitor.getPercentDone() +"%");
                        //jTextArea1.update(jTextArea1.getGraphics());
                        //setTxt = "Zipping Files: " + progressMonitor.getPercentDone() +"%";
                        console.setText("Zipping Files: " + progressMonitor.getPercentDone() +"%");
                        console.update(console.getGraphics());
                    }
                } catch (ZipException ex) {
                    ex.printStackTrace();
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(new JFrame(), "No Files To Extract!", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } catch(IOException e) {
                System.err.println(e);
            } catch (InterruptedException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else { 
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(new JFrame(), "No VPK Selected!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        }
        console.setText("Finished");
        console.update(console.getGraphics());
        try {
            FileUtils.forceDeleteOnExit(temp);
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws InterruptedException, InvocationTargetException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); } 
        catch (UnsupportedLookAndFeelException | ClassNotFoundException | InstantiationException | IllegalAccessException e) {}

        new NewJFrame();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
